#!/bin/bash
# Build NGINX and modules for Heroku.
# This script is designed to run in a Heroku Stack Docker
# image. More information on the Heroku Stack can be found
# at https://devcenter.heroku.com/articles/stack

GEO_IP2_VERSION=${GEO_IP2_VERSION-3.4}
HEADERS_MORE_VERSION=${HEADERS_MORE_VERSION-0.37}
MAXMIND_VERSION=${MAXMIND_VERSION-1.11.0}
NGINX_VERSION=${NGINX_VERSION-1.26.2}
UUID4_VERSION=${UUID4_VERSION-master}
ZLIB_VERSION=${ZLIB_VERSION-1.3.1}
ACCEPT_LANGUAGE_VERSION=${ACCEPT_LANGUAGE_VERSION-master}

# Set STACK variable (or get it from an environment variable)
STACK=${STACK:-heroku-20} # Default to heroku-20 if STACK is not set

# Determine PCRE_VERSION based on STACK value
if [[ "$STACK" =~ heroku-2[02] ]]; then
  PCRE_VERSION="pcre-8.45"
else
  PCRE_VERSION="pcre2-10.37"
fi

geo_ip2_module_url=https://github.com/leev/ngx_http_geoip2_module/archive/${GEO_IP2_VERSION}.tar.gz
headers_more_nginx_module_url=https://github.com/openresty/headers-more-nginx-module/archive/v${HEADERS_MORE_VERSION}.tar.gz
maxmind_url=https://github.com/maxmind/libmaxminddb/releases/download/${MAXMIND_VERSION}/libmaxminddb-${MAXMIND_VERSION}.tar.gz
nginx_tarball_url=https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz
pcre_tarball_url=https://ftp.exim.org/pub/pcre/${PCRE_VERSION}.tar.gz
uuid4_url=https://github.com/cybozu/nginx-uuid4-module/archive/${UUID4_VERSION}.tar.gz
zlib_url=http://zlib.net/zlib-${ZLIB_VERSION}.tar.gz
accept_language_url=https://github.com/giom/nginx_accept_language_module/archive/${ACCEPT_LANGUAGE_VERSION}.tar.gz

temp_dir=$(mktemp -d /tmp/nginx.XXXXXXXXXX)
maxmind_dir=$(mktemp -d /tmp/maxmind.XXXXXXXXXX)

cd $temp_dir
echo "Temp dir: $temp_dir"

echo "Downloading $nginx_tarball_url"
curl -L $nginx_tarball_url | tar xzv

echo "Downloading $geo_ip2_module_url"
(cd nginx-${NGINX_VERSION} && curl -L $geo_ip2_module_url | tar xvz )

echo "Downloading $headers_more_nginx_module_url"
(cd nginx-${NGINX_VERSION} && curl -L $headers_more_nginx_module_url | tar xvz )

echo "Downloading $maxmind_url"
(cd nginx-${NGINX_VERSION} && curl -L $maxmind_url | tar xvz )

echo "Downloading $pcre_tarball_url"
(cd nginx-${NGINX_VERSION} && curl -L $pcre_tarball_url | tar xvz )

echo "Downloading $uuid4_url"
(cd nginx-${NGINX_VERSION} && curl -L $uuid4_url | tar xvz )

echo "Downloading $zlib_url"
(cd nginx-${NGINX_VERSION} && curl -L $zlib_url | tar xvz )

echo "Downloading $accept_language_url"
(cd nginx-${NGINX_VERSION} && curl -L $accept_language_url | tar xvz )

# This will build libmaxminddb first which is required for GeoIP2
(
  cd nginx-${NGINX_VERSION}/libmaxminddb-${MAXMIND_VERSION}
  ./configure \
    --prefix=${maxmind_dir}
  make
  make check
  make install
  ldconfig
)

if [[ $STACK == heroku-2[02] ]]; then
  # we used to build our own PCRE 8.x, and when moving to dynamic linking, we had to ensure all existing regexes in config files continued to work, so we enforced libpcre3 (8.x) usage instead of the newer PCRE2 (10.x), which has stricter validation for certain patterns (example: /[\w-.]/ is not allowed in PCRE2)
  # but for any newer stacks, we can use the more modern PCRE2
  configure_opts+=(
    --without-pcre2
  )
fi

# This will build `nginx`
(
  cd nginx-${NGINX_VERSION}
  ./configure \
    --with-pcre=${PCRE_VERSION} \
    --with-zlib=zlib-${ZLIB_VERSION} \
    --with-http_gzip_static_module \
    --with-http_realip_module \
    --with-http_ssl_module \
    --with-cc-opt="-I${maxmind_dir}/include" \
    --with-ld-opt="-L${maxmind_dir}/lib" \
    --prefix=/tmp/nginx \
    --add-module=${temp_dir}/nginx-${NGINX_VERSION}/headers-more-nginx-module-${HEADERS_MORE_VERSION} \
    --add-module=${temp_dir}/nginx-${NGINX_VERSION}/nginx-uuid4-module-${UUID4_VERSION} \
    --add-module=${temp_dir}/nginx-${NGINX_VERSION}/ngx_http_geoip2_module-${GEO_IP2_VERSION} \
    --add-module=${temp_dir}/nginx-${NGINX_VERSION}/nginx_accept_language_module-${ACCEPT_LANGUAGE_VERSION}
  make install
)

# This will build `nginx-debug`
(
  cd nginx-${NGINX_VERSION}
  ./configure \
    --with-debug \
    --with-pcre=${PCRE_VERSION} \
    --with-zlib=zlib-${ZLIB_VERSION} \
    --with-http_gzip_static_module \
    --with-http_realip_module \
    --with-http_ssl_module \
    --with-cc-opt="-I${maxmind_dir}/include" \
    --with-ld-opt="-L${maxmind_dir}/lib" \
    --prefix=/tmp/nginx-debug \
    --add-module=${temp_dir}/nginx-${NGINX_VERSION}/headers-more-nginx-module-${HEADERS_MORE_VERSION} \
    --add-module=${temp_dir}/nginx-${NGINX_VERSION}/nginx-uuid4-module-${UUID4_VERSION} \
    --add-module=${temp_dir}/nginx-${NGINX_VERSION}/ngx_http_geoip2_module-${GEO_IP2_VERSION} \
    --add-module=${temp_dir}/nginx-${NGINX_VERSION}/nginx_accept_language_module-${ACCEPT_LANGUAGE_VERSION}
  make install
)

release_dir=$(mktemp -d /tmp/nginx.XXXXXXXXXX)

mv /tmp/nginx/sbin/nginx "$release_dir/nginx"
mv /tmp/nginx-debug/sbin/nginx "$release_dir/nginx-debug"
mv /tmp/nginx/conf/mime.types "$release_dir/mime.types"
mkdir $release_dir/maxmind
mv ${maxmind_dir}/lib/* $release_dir/maxmind/
echo "File: $1"
tar -zcvf "/tmp/release.tgz" -C "$release_dir" .
mv "/tmp/release.tgz" "$1"
